{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "378fef40",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assuming there was a JSON-like block that needed correction\n",
    "{\n",
    " \"cell_type\": \"code\",\n",
    " \"execution_count\": None,\n",
    " \"id\": \"6125f707\",\n",
    " \"metadata\": {},\n",
    "}\n",
    "\n",
    "import pandas as pd\n",
    "\n",
    "class DataDescription:\n",
    "    # The Task associated with this class.\n",
    "    tasks = [\n",
    "        '\\n1. Describe a specific Column',\n",
    "        '2. Show Properties of Each Column',\n",
    "        '3. Show the Dataset'\n",
    "    ]\n",
    "\n",
    "    def __init__(self, data):\n",
    "        self.data = data\n",
    "\n",
    "    # The function that prints the database on the command line.\n",
    "    def showDataset(self):\n",
    "        while True:\n",
    "            try:\n",
    "                rows = int(input((\"\\nHow many rows(>0) to print? (Press -1 to go back)  \")))\n",
    "                if rows == -1:\n",
    "                    break\n",
    "                if rows <= 0:\n",
    "                    print(\"Number of rows given must be +ve...\\U0001F974\")\n",
    "                    continue\n",
    "                print(self.data.head(rows))\n",
    "            except ValueError:\n",
    "                print(\"Numeric value is required. Try again....\\U0001F974\")\n",
    "                continue\n",
    "            break\n",
    "        return\n",
    "\n",
    "    # function to print all the columns\n",
    "    def showColumns(self):\n",
    "        for column in self.data.columns.values:\n",
    "            print(column, end=\"  \")\n",
    "\n",
    "    # function to describe the dataset or any specific column.\n",
    "    def describe(self):\n",
    "        while True:\n",
    "            print(\"\\nTasks (Data Description)\\U0001F447\")\n",
    "            for task in self.tasks:\n",
    "                print(task)\n",
    "\n",
    "            while True:\n",
    "                try:\n",
    "                    choice = int(input((\"\\n\\nWhat you want to do? (Press -1 to go back)  \")))\n",
    "                except ValueError:\n",
    "                    print(\"Integer Value required. Try again.....\\U0001F974\")\n",
    "                    continue\n",
    "                break\n",
    "\n",
    "            if choice == -1:\n",
    "                break\n",
    "                        \n",
    "            elif choice == 1:\n",
    "                self.showColumns()\n",
    "                while True:\n",
    "                    describeColumn = input(\"\\n\\nWhich Column?  \").lower()\n",
    "                    try:\n",
    "                        # describe() function is used to tell all the info regarding any specific column.\n",
    "                        print(self.data[describeColumn].describe())\n",
    "                    except KeyError:\n",
    "                        print(\"No Column present with this name. Try again....\\U0001F974\")\n",
    "                        continue\n",
    "                    break\n",
    "            \n",
    "            elif choice == 2:\n",
    "                # describe() function is used to tell all the info about the database.\n",
    "                print(self.data.describe())\n",
    "                print(\"\\n\\n\")\n",
    "                print(self.data.info())\n",
    "\n",
    "            elif choice == 3:\n",
    "                self.showDataset()\n",
    "\n",
    "            else:\n",
    "                print(\"\\nWrong Integer value!! Try again..\\U0001F974\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2ffd7518",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "244ff9ab",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
