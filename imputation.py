{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c187afa5",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from data_description import DataDescription\n",
    "\n",
    "\n",
    "class Imputation:\n",
    "    \n",
    "    bold_start = \"\\033[1m\"\n",
    "    bold_end = \"\\033[0;0m\"\n",
    "\n",
    "    # The Task associated with this class.\n",
    "    tasks = [\n",
    "        \"\\n1. Show number of Null Values\",\n",
    "        \"2. Remove Columns\",\n",
    "        \"3. Fill Null Values (with mean)\",\n",
    "        \"4. Fill Null Values (with median)\",\n",
    "        \"5. Fill Null Values (with mode)\",\n",
    "        \"6. Show the Dataset\"\n",
    "    ]\n",
    "\n",
    "    def __init__(self, data):\n",
    "        self.data = data\n",
    "\n",
    "    # function to show columns of the DataFrame\n",
    "    def showColumns(self):\n",
    "        print(\"\\nColumns\\U0001F447\\n\")\n",
    "        for column in self.data.columns.values:\n",
    "            print(column, end = \"  \")\n",
    "        return\n",
    "    \n",
    "    # function to print the number of NULL values present in each column\n",
    "    def printNullValues(self):\n",
    "        print(\"\\nNULL values of each column:\")\n",
    "        for column in self.data.columns.values:\n",
    "            # isnull checks on each value of a column that whether the value is null or not.\n",
    "            print('{0: <20}'.format(column) + '{0: <5}'.format(sum(pd.isnull(self.data[column]))))\n",
    "        print(\"\")\n",
    "        return\n",
    "\n",
    "    # function to remove a column from the DataFrame\n",
    "    def removeColumn(self):\n",
    "        self.showColumns()\n",
    "        while(1):\n",
    "            columns = input(\"\\nEnter all the column\"+ self.bold_start + \"(s)\" + self.bold_end + \"you want to delete (Press -1 to go back)  \").lower()\n",
    "\n",
    "            if columns == \"-1\":\n",
    "                break\n",
    "\n",
    "            choice = input(\"Are you sure?(y/n) \")\n",
    "            if choice==\"y\" or choice==\"Y\":\n",
    "                try:\n",
    "                    # inplace = True otherwise, the changes won't reflect on the DataFrame.\n",
    "                    self.data.drop(columns.split(\" \"), axis = 1, inplace = True)\n",
    "                except KeyError:\n",
    "                    print(\"One or more Columns are not present. Try again.....\\U0001F974\")\n",
    "                    continue\n",
    "                print(\"Done.......\\U0001F601\")\n",
    "                break\n",
    "            else:\n",
    "                print(\"Not Deleting........\\U0001F974\")\n",
    "        return\n",
    "\n",
    "    # function that fills null values with the mean of that column.\n",
    "    def fillNullWithMean(self):\n",
    "        self.showColumns()\n",
    "        while(1):\n",
    "            column = input(\"\\nEnter the column name:(Press -1 to go back)  \").lower()\n",
    "            if column == \"-1\":\n",
    "                break\n",
    "            choice = input(\"Are you sure? (y/n)  \")\n",
    "            if choice==\"y\" or choice=='Y':\n",
    "                try:\n",
    "                    self.data[column] = self.data[column].fillna(self.data[column].mean())\n",
    "                except KeyError:\n",
    "                    print(\"Column is not present. Try again.....\\U0001F974\")\n",
    "                    continue\n",
    "                except TypeError:\n",
    "                    # Imputation is only possible on some specific datatypes like int, float etc.\n",
    "                    print(\"The Imputation is not possible here\\U0001F974. Try on another column.\")\n",
    "                    continue\n",
    "                print(\"Done......\\U0001F601\")\n",
    "                break\n",
    "            else:\n",
    "                print(\"Not changing........\\U0001F974\")\n",
    "        return\n",
    "\n",
    "\n",
    "    # function that fills null values with the median of that column.\n",
    "    def fillNullWithMedian(self):\n",
    "        self.showColumns()\n",
    "        while(1):\n",
    "            column = input(\"\\nEnter the column name:(Press -1 to go back)  \").lower()\n",
    "            if column == \"-1\":\n",
    "                break\n",
    "            choice = input(\"Are you sure? (y/n)  \")\n",
    "            if choice==\"y\" or choice=='Y':\n",
    "                try:\n",
    "                    self.data[column] = self.data[column].fillna(self.data[column].median())\n",
    "                except KeyError:\n",
    "                    print(\"Column is not present. Try again.....\\U0001F974\")\n",
    "                    continue\n",
    "                except TypeError:\n",
    "                    print(\"The Imputation is not possible here\\U0001F974.Try on another column.\")\n",
    "                    continue\n",
    "                print(\"Done......\\U0001F601\")\n",
    "                break\n",
    "            else:\n",
    "                print(\"Not changing........\\U0001F974\")\n",
    "        return\n",
    "\n",
    "    # function that fills null values with the mean of that column.\n",
    "\n",
    "    # function that fills null values with the mode of that column.\n",
    "    def fillNullWithMode(self):\n",
    "        self.showColumns()\n",
    "        while(1):\n",
    "            column = input(\"\\nEnter the column name:(Press -1 to go back)  \").lower()\n",
    "            if column == \"-1\":\n",
    "                break\n",
    "            choice = input(\"Are you sure? (y/n)  \")\n",
    "            if choice==\"y\" or choice=='Y':\n",
    "                try:\n",
    "                    # Mode provides us with dataframe so, we will take 1st value(most probable value).\n",
    "                    # Look into the documentation, if any doubts.\n",
    "                    self.data[column] = self.data[column].fillna(self.data[column].mode()[0])\n",
    "                except KeyError:\n",
    "                    print(\"Column is not present. Try again.....\\U0001F974\")\n",
    "                    continue\n",
    "                except TypeError:\n",
    "                    print(\"The Imputation is not possible here\\U0001F974. Try on another column.\")\n",
    "                    continue\n",
    "                print(\"Done......\\U0001F601\")\n",
    "                break\n",
    "            else:\n",
    "                print(\"Not changing........\\U0001F974\")\n",
    "        return\n",
    "\n",
    "    # main function of the Imputation Class.\n",
    "    def imputer(self):\n",
    "        while(1):\n",
    "            print(\"\\nImputation Tasks\\U0001F447\")\n",
    "            for task in self.tasks:\n",
    "                print(task)\n",
    "\n",
    "            while(1):\n",
    "                try:\n",
    "                    choice = int(input((\"\\nWhat you want to do? (Press -1 to go back)  \")))\n",
    "                except ValueError:\n",
    "                    print(\"Integer Value required. Try again.....\\U0001F974\")\n",
    "                    continue\n",
    "                break\n",
    "\n",
    "            if choice == -1:\n",
    "                break\n",
    "\n",
    "            elif choice==1:\n",
    "                self.printNullValues()\n",
    "\n",
    "            elif choice==2:\n",
    "                self.removeColumn()\n",
    "\n",
    "            elif choice==3:\n",
    "                self.fillNullWithMean()\n",
    "\n",
    "            elif choice==4:\n",
    "                self.fillNullWithMedian()\n",
    "            \n",
    "            elif choice==5:\n",
    "                self.fillNullWithMode()\n",
    "\n",
    "            elif choice==6:\n",
    "                DataDescription.showDataset(self)\n",
    "\n",
    "            else:\n",
    "                print(\"\\nWrong Integer value!! Try again..\\U0001F974\")\n",
    "        return self.data"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
