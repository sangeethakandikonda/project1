{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "69d7c511",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'null' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[0;32m/tmp/ipykernel_119260/3530192771.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mfrom\u001b[0m \u001b[0mdata_description\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mDataDescription\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0msklearn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpreprocessing\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mMinMaxScaler\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mStandardScaler\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mclass\u001b[0m \u001b[0mFeatureScaling\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m~/data_description.py\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     88\u001b[0m   {\n\u001b[1;32m     89\u001b[0m    \u001b[0;34m\"cell_type\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m\"code\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 90\u001b[0;31m    \u001b[0;34m\"execution_count\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mnull\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     91\u001b[0m    \u001b[0;34m\"id\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m\"ee12b671\"\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     92\u001b[0m    \u001b[0;34m\"metadata\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'null' is not defined"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from data_description import DataDescription\n",
    "from sklearn.preprocessing import MinMaxScaler, StandardScaler\n",
    "\n",
    "class FeatureScaling:\n",
    "    \n",
    "    bold_start = \"\\033[1m\"\n",
    "    bold_end = \"\\033[0;0m\"\n",
    "\n",
    "    # All the Tasks associated with this class.\n",
    "    tasks = [\n",
    "        \"\\n1. Perform Normalization(MinMax Scaler)\",\n",
    "        \"2. Perform Standardization(Standard Scaler)\",\n",
    "        \"3. Show the Dataset\"\n",
    "    ]\n",
    "    \n",
    "    tasks_normalization = [\n",
    "        \"\\n1. Normalize a specific Column\",\n",
    "        \"2. Normalize the whole Dataset\",\n",
    "        \"3. Show the Dataset\"\n",
    "    ]\n",
    "\n",
    "    tasks_standardization = [\n",
    "        \"\\n1. Standardize a specific Column\",\n",
    "        \"2. Standardize the whole Dataset\",\n",
    "        \"3. Show the Dataset\"\n",
    "    ]\n",
    "\n",
    "    def __init__(self, data):\n",
    "        self.data = data\n",
    "    \n",
    "    # Performs Normalization on specific column or on whole dataset.\n",
    "    def normalization(self):\n",
    "        while(1):\n",
    "            print(\"\\nTasks (Normalization)\\U0001F447\")\n",
    "            for task in self.tasks_normalization:\n",
    "                print(task)\n",
    "\n",
    "            while(1):\n",
    "                try:\n",
    "                    choice = int(input((\"\\n\\nWhat you want to do? (Press -1 to go back)  \")))\n",
    "                except ValueError:\n",
    "                    print(\"Integer Value required. Try again.....\\U0001F974\")\n",
    "                    continue\n",
    "                break\n",
    "    \n",
    "            if choice == -1:\n",
    "                break\n",
    "            \n",
    "            # Performs normalization on the columns provided.\n",
    "            elif choice == 1:\n",
    "                print(self.data.dtypes)\n",
    "                columns = input(\"Enter all the column\"+ self.bold_start + \"(s)\" + self.bold_end + \"you want to normalize (Press -1 to go back)  \").lower()\n",
    "                if columns == \"-1\":\n",
    "                    break\n",
    "                for column in columns.split(\" \"):\n",
    "                    # This is the basic approach to perform MinMax Scaler on a set of data.\n",
    "                    try:\n",
    "                        minValue = self.data[column].min()\n",
    "                        maxValue = self.data[column].max()\n",
    "                        self.data[column] = (self.data[column] - minValue)/(maxValue - minValue)\n",
    "                    except:\n",
    "                        print(\"\\nNot possible....\\U0001F636\")\n",
    "                print(\"Done....\\U0001F601\")\n",
    "\n",
    "            # Performs normalization on whole dataset.\n",
    "            elif choice == 2:\n",
    "                try:\n",
    "                    self.data = pd.DataFrame(MinMaxScaler().fit_transform(self.data))\n",
    "                    print(\"Done.......\\U0001F601\")\n",
    "\n",
    "                except:\n",
    "                    print(\"\\nString Columns are present. So, \" + self.bold_start + \"NOT\" + self.bold_end + \" possible.\\U0001F636\\nYou can try the first option though.\")\n",
    "                \n",
    "            elif choice==3:\n",
    "                DataDescription.showDataset(self)\n",
    "\n",
    "            else:\n",
    "                print(\"\\nYou pressed the wrong key!! Try again..\\U0001F974\")\n",
    "\n",
    "        return\n",
    "\n",
    "    # Function to perform standardization on specific column(s) or on whole dataset.\n",
    "    def standardization(self):\n",
    "        while(1):\n",
    "            print(\"\\nTasks (Standardization)\\U0001F447\")\n",
    "            for task in self.tasks_standardization:\n",
    "                print(task)\n",
    "\n",
    "            while(1):\n",
    "                try:\n",
    "                    choice = int(input((\"\\n\\nWhat you want to do? (Press -1 to go back)  \")))\n",
    "                except ValueError:\n",
    "                    print(\"Integer Value required. Try again.....\")\n",
    "                    continue\n",
    "                break\n",
    "\n",
    "            if choice == -1:\n",
    "                break\n",
    "            \n",
    "            # This is the basic approach to perform Standard Scaler on a set of data.\n",
    "            elif choice == 1:\n",
    "                print(self.data.dtypes)\n",
    "                columns = input(\"Enter all the column\"+ self.bold_start + \"(s)\" + self.bold_end + \"you want to normalize (Press -1 to go back)  \").lower()\n",
    "                if columns == \"-1\":\n",
    "                    break\n",
    "                for column in columns.split(\" \"):\n",
    "                    try:\n",
    "                        mean = self.data[column].mean()\n",
    "                        standard_deviation = self.data[column].std()\n",
    "                        self.data[column] = (self.data[column] - mean)/(standard_deviation)\n",
    "                    except:\n",
    "                        print(\"\\nNot possible....\\U0001F636\")\n",
    "                print(\"Done....\\U0001F601\")\n",
    "                    \n",
    "            # Performing standard scaler on whole dataset.\n",
    "            elif choice == 2:\n",
    "                try:\n",
    "                    self.data = pd.DataFrame(StandardScaler().fit_transform(self.data))\n",
    "                    print(\"Done.......\\U0001F601\")\n",
    "                except:\n",
    "                    print(\"\\nString Columns are present. So, \" + self.bold_start + \"NOT\" + self.bold_end + \" possible.\\U0001F636\\nYou can try the first option though.\")\n",
    "                break\n",
    "\n",
    "            elif choice==3:\n",
    "                DataDescription.showDataset(self)\n",
    "\n",
    "            else:\n",
    "                print(\"\\nYou pressed the wrong key!! Try again..\\U0001F974\")\n",
    "\n",
    "        return\n",
    "\n",
    "    # main function of the FeatureScaling Class.\n",
    "    def scaling(self):\n",
    "        while(1):\n",
    "            print(\"\\nTasks (Feature Scaling)\\U0001F447\")\n",
    "            for task in self.tasks:\n",
    "                print(task)\n",
    "            \n",
    "            while(1):\n",
    "                try:\n",
    "                    choice = int(input((\"\\n\\nWhat you want to do? (Press -1 to go back)  \")))\n",
    "                except ValueError:\n",
    "                    print(\"Integer Value required. Try again.....\\U0001F974\")\n",
    "                    continue\n",
    "                break\n",
    "            if choice == -1:\n",
    "                break\n",
    "            \n",
    "            elif choice == 1:\n",
    "                self.normalization()\n",
    "\n",
    "            elif choice == 2:\n",
    "                self.standardization()\n",
    "\n",
    "            elif choice==3:\n",
    "                DataDescription.showDataset(self)\n",
    "            \n",
    "            else:\n",
    "                print(\"\\nWrong Integer value!! Try again..\\U0001F974\")\n",
    "        # Returns all the changes on the DataFrame.\n",
    "        return self.data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e2ad7fd8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f2f7d32c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
